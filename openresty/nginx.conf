env CONSISTENT_HASHING_SERVER_IP;

http {

    init_by_lua_block {
        env = require "resty.env"
        my_var = env.get("CONSISTENT_HASHING_IP")
        port = env.get("PORT")
    }
    # server
    server {
        listen 8080;

        location / {
            set $node_ip "";
            set $node_port "7000";
            set $hash_val 0;
            rewrite_by_lua_block {

                local cjson = require "cjson"
                http = require "resty.http"
                ngx.var.node_port = port

                function get_node(val)

                    local httpc = http.new()
                    local my_var = env.get("CONSISTENT_HASHING_IP")
                    local url = "http://" .. my_var .. ":8000/get-node"

                    local json_data = {
                        value = val
                    }

                    local request_body = cjson.encode(json_data)

                    local headers = {
                        ['Content-Type'] = "application/json",
                        ["Content-Length"] = #request_body
                    }

                    local res, err = httpc:request_uri(url, {
                        method = "POST",
                        body = request_body,
                        headers = headers
                    })

                    if not res then
                        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                        ngx.say("Failed to make request: ", err)
                        return
                    end

                    local success, response_data = pcall(cjson.decode, res.body)
                    local node = response_data["node"]
                    local hash = response_data["hash"]
                    return node, hash
                end

                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                if body then
                    local success, json_data = pcall(cjson.decode, body)
                    if success then
                        local n_key
                        for key, value in pairs(json_data) do
                            n_key = key
                        end
                        
                        node, hash = get_node(n_key)
                        -- local ip, port = node:match("([^:]+):([^:]+)")
                        -- ngx.var.node_ip = my_var
                        ---ngx.var.node_port = port
                        ngx.var.node_ip = node
                        ngx.var.hash_val = hash

                    else
                        ngx.status = ngx.HTTP_BAD_REQUEST
                        ngx.say(cjson.encode({error = "Invalid JSON"}))
                    end
                else
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({error = "No body data"}))
                end
            }
            proxy_method PUT;
            proxy_pass http://$node_ip:$node_port/add/$hash_val;
        }

        location /get-table {

            content_by_lua_block {
                ngx.say("Please work 69")
                ngx.say(my_var)
            }
        }

    }
}

events { }