events {}

http {

    init_by_lua_block {
        route_table = {
            ["d1"] = "127.0.0.1:9000",
            ["d2"] = "127.0.0.1:9001",
            ["d3"] = "127.0.0.1:9002",
        }
        i = 0
    }
    # server
    server {
        listen 8080;

        location / {
            set $target "127.0.0.1:9000 ";
            rewrite_by_lua_block {

                local cjson = require "cjson"
                http = require "resty.http"

                function get_node(val)

                    local httpc = http.new()
                    local my_var = os.getenv("MY")

                    local url = "http://" .. my_var .. ":8000/add"

                    local json_data = {
                        value = val
                    }

                    local request_body = cjson.encode(json_data)

                    local headers = {
                        ['Content-Type'] = "application/json",
                        ["Content-Length"] = #request_body
                    }

                    local res, err = httpc:request_uri(url, {
                        method = "POST",
                        body = request_body,
                        headers = headers
                    })

                    if not res then
                        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                        ngx.say("Failed to make request: ", err)
                        return
                    end

                    local success, response_data = pcall(cjson.decode, res.body)
                    local node = response_data["node"]
                    return node
                end

                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                if body then
                    local success, json_data = pcall(cjson.decode, body)
                    if success then
                        local n_key
                        for key, value in pairs(json_data) do
                            n_key = key
                        end
                        
                        ngx.var.target = get_node(n_key)

                    else
                        ngx.status = ngx.HTTP_BAD_REQUEST
                        ngx.say(cjson.encode({error = "Invalid JSON"}))
                    end
                else
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({error = "No body data"}))
                end
            }

			proxy_method GET;
            proxy_pass http://$target;

        }

        location /get-table {
            content_by_lua_block {
                for key, value in pairs(route_table) do
                    ngx.say(key .. " -> " .. value)
                end
            }
        }

    }
}